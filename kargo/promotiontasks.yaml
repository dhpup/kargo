apiVersion: kargo.akuity.io/v1alpha1
kind: PromotionTask
metadata:
  name: promote-standard
  namespace: guestbook
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  vars:
  - name: gitRepo
    value: https://github.com/dhpup/kargo.git
  - name: imageRepo
    value: ghcr.io/dhpup/guestbook
  steps:
  # Clone the Git repository containing the Kustomize configuration to ./src
  # and checkout the target stage branch to ./out (create if it doesn't exist)
  - uses: git-clone
    as: clone
    config:
      repoURL: ${{ vars.gitRepo }}
      checkout:
      - branch: main
        path: ./src
      - branch: stage/${{ ctx.stage }}
        create: true
        path: ./out
        as: out
  # Clear all files in the ./out directory to ensure a clean rendered state
  # Following the "rendered branch" pattern where only generated manifests exist
  - uses: git-clear
    config:
      path: ./out
  # Update the image tag in the Kustomize configuration for this stage
  # Uses the image tag from the freight being promoted
  - uses: kustomize-set-image
    as: update-image
    config:
      path: ./src/guestbook/stages/${{ ctx.stage }}
      images:
      - image: ${{ vars.imageRepo }}
        tag: ${{ imageFrom(vars.imageRepo).Tag }}
  # Build the Kustomize configuration and output the rendered manifests
  # to ./out/manifests.yaml for the stage branch
  - uses: kustomize-build
    config:
      path: ./src/guestbook/stages/${{ ctx.stage }}
      outPath: ./out/manifests.yaml
  # Commit the rendered manifests to the stage branch
  # Uses a descriptive commit message with the image tag being promoted
  - uses: git-commit
    as: commit
    config:
      path: ./out
      message: "Promote ${{ ctx.stage }} to ${{ imageFrom(vars.imageRepo).Tag }}"
  # Push the commit to the remote stage branch
  - uses: git-push
    as: push
    config:
      path: ./out
      targetBranch: stage/${{ ctx.stage }}
  # Trigger ArgoCD to refresh and sync the application
  - uses: argocd-update
    config:
      apps:
      - name: guestbook-${{ ctx.stage }}
---
apiVersion: kargo.akuity.io/v1alpha1
kind: PromotionTask
metadata:
  name: promote-with-pr
  namespace: guestbook
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  vars:
  - name: gitRepo
    value: https://github.com/dhpup/kargo.git
  - name: imageRepo
    value: ghcr.io/dhpup/guestbook
  steps:
  # Clone the Git repository containing the Kustomize configuration to ./src
  # and checkout the target stage branch to ./out (create if it doesn't exist)
  - uses: git-clone
    config:
      repoURL: ${{ vars.gitRepo }}
      checkout:
      - branch: main
        path: ./src
      - branch: stage/${{ ctx.stage }}
        create: true
        path: ./out
  # Clear all files in the ./out directory to ensure a clean rendered state
  # Following the "rendered branch" pattern where only generated manifests exist
  - uses: git-clear
    config:
      path: ./out
  # Update the image tag in the Kustomize configuration for this stage
  # Uses the image tag from the freight being promoted
  - uses: kustomize-set-image
    as: update-image
    config:
      path: ./src/guestbook/base
      images:
      - image: ${{ vars.imageRepo }}
        tag: ${{ imageFrom(vars.imageRepo).Tag }}
  # Build the Kustomize configuration and output the rendered manifests
  # to ./out/manifests.yaml for the stage branch
  - uses: kustomize-build
    config:
      path: ./src/guestbook/stages/${{ ctx.stage }}
      outPath: ./out/manifests.yaml
  # Commit the rendered manifests to a temporary branch
  # Uses a descriptive commit message with the image tag being promoted
  - uses: git-commit
    as: commit
    config:
      path: ./out
      message: "Promote ${{ ctx.stage }} to ${{ imageFrom(vars.imageRepo).Tag }}"
  # Push the commit to a new automatically-generated branch
  # This branch will be used as the source for the PR
  - uses: git-push
    as: push
    config:
      path: ./out
      generateTargetBranch: true
  # Open a pull request from the generated branch to the stage branch
  # This allows for manual review before deploying to production
  # The source branch follows Kargo's pattern: kargo/promotion/<promotionName>
  - uses: git-open-pr
    as: openpr
    config:
      repoURL: ${{ vars.gitRepo }}
      createTargetBranch: true
      sourceBranch: kargo/promotion/${{ ctx.promotion }}
      targetBranch: stage/${{ ctx.stage }}
  # Wait for the pull request to be merged before proceeding
  # Blocks the promotion until manual approval is complete
  - uses: git-wait-for-pr
    as: wait-for-pr
    config:
      repoURL: ${{ vars.gitRepo }}
      prNumber: ${{ outputs['openpr'].pr.id }}
  # Trigger ArgoCD to refresh and sync the application
  - uses: argocd-update
    config:
      apps:
      - name: guestbook-${{ ctx.stage }}
